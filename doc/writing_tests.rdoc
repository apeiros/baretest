= Writing Tests



This tutorial assumes you have basic ruby knowledge. It is an introduction into
baretest and testing itself.
If you're a quick study and have already good knowledge about ruby and testing,
you may be more interested in just reading the examples and the
doc/quickref.rdoc.



== 1. In the beginning there was the project

The first step is of course the project. Baretest was written with the
assumption of a standard ruby project layout (should work fine without too,
though - might just require a bit more work on your part).
The standard directory layout looks like this:

  |-- bin (executables)
  |-- doc (additional documentation)
  |-- ext (native extension code will be here)
  |-- examples (for the users of the lib)
  |-- lib (contains the library)
  |-- rake (contains rake relevant stuff)
  `-- Rakefile

In your project directory, you can invoke `baretest init`, this will
create the 'test' directory. It will mirror your project directory. That is,
it will recreate all directories nested in bin and lib within test/suite.
The directory layout of 'test' is as follows:

  `-- test
      |-- external (baretest ignores this directory)
      |-- helper (baretest loads helper/lib/foo.rb when loading suite/lib/foo.rb)
      |-- setup.rb (setup.rb is loaded as the first file when running baretest)
      `-- suite (in here are the tests itself)
          |-- bin (the tests for bin, PROJECT/bin is replicated here)
          `-- lib (the tests for lib, PROJECT/lib is replicated here)



== 2. Writing the tests

Assume you have `lib/foo.rb` containing the class 'Foo'. To test it, you create
the file `test/suite/lib/foo.rb`. You start out by creating a suite for your
class:

  BareTest.suite "class Foo" do
  end

You're in no way limited in how you name the suites. It's an arbitrary String.
Now lets assume 'lib/foo.rb' contains the following code:

  class Foo
    def bar
      "bar"
    end
  end

Then follows the next step, we write the first assertion:

  BareTest.suite do
    suite "class Foo" do
      assert "bar returns 'bar'" do
        Foo.new.bar == 'bar'
      end
    end
  end

As you can see, the assertion is plain ruby code. The return value of the block
decides whether the assertion is considered a success (trueish value, that is
all but false and nil) or a failure (falseish value, that is false or nil).



== 3. Running the tests

First you change the directory to your project's root directory.
There you run `baretest`. That's it.
Baretest will now load the 'test/setup.rb' file, then it'll search in
'test/suite' for files and find 'test/suite/lib/foo.rb'. Before loading that
file, it'll see if there's also a file 'test/helpers/suite/lib/foo.rb'. If
there was, it'd load that first. After that, it loads the
'test/suite/lib/foo.rb' file. When all testfiles are discovered and loaded,
it'll run the tests.



== 4. Separating parts of the test

A classical test consists of four phases:

1. setup
2. exercise
3. validate
4. teardown

Baretest has setup and teardown on suites, which will be run for every assertion
the suite contains.
Exercise and validate is currently combined in the 'assert' method.

So let's make use of that and rewrite our previous test:

  BareTest.suite do
    suite "class Foo" do
      setup do
        @foo = Foo.new
      end

      assert "bar returns 'bar'" do
        @foo.bar == 'bar'
      end
    end
  end

In this simplistic example, this may seem like wasted time. The more complex the
setup becomes and the more assertions need the same setup, the more time a
separate setup phase saves.
It additionally helps in making intent clear: this is setup, and this is test.
The setup and teardown is run (via instance_eval) in the same context as the
assertion. Local variables however are NOT shared. To pass data from the setup
to the assertion, use instance variables as shown here.



== 5. When troubles strike

If one of your assertions fails or errors, you can use `baretest -i` to
investigate the issue. It will throw you into an irb session, with self being
the failing/erroring assertion context and with several helpful methods (use
`help` in the irb session to get a list of those).

== Things left to be written out

This is not part of the tutorial but things the author of this tutorial should
still add to the tutorial itself.

* toplevel suite may have a name/description too, it'll act the same as if
  there was a suite in an unnamed toplevel suite
* [setup] They will also be run for every nested suite's assertion,
  where the outermost setup is run first, the innermost last.
* using stubs & mocks
* Suites with the same name and nesting are considered the same and become
  merged
  
  Example:
  
    BareTest.suite "Foo" do
      suite "Bar" do
        assert "x"
      end
    end
    BareTest.suite "Foo" do
      suite "Bar" do
        assert "y"
      end
    end
  
  Now the suite "Foo" > "Bar" has two assertions, "x" and "y"
