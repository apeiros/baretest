BUGS:
* Correct skip reason must be implemented.

CHORES:
* Verify that persistence works as expected no matter from where baretest is run
  and with what glob.
* Go over persistence coupling in Run
* Make baretest recognize invalid options '-:' and '-%' as selectors
* Examples for BareTest::Assertion::Support
* Document setup variants. Reference that documentation in relevant methods like
  Assertion#interpolated_description, Suite#component_variant_count,
  #each_component_variant, #first_component_variant


FEATURES:

MISSING TESTS:

support.rb:
  module BareTest
    def self.touch(assertion, thing=nil) # :nodoc:
    def self.touched(assertion, thing=nil) # :nodoc:
    def self.clean_touches(assertion) # :nodoc:

  module Support
    def throws_nothing # :nodoc:
    def not_touched(thing=nil)
    def extract_args(args, *named)

    suite "#verify_dependencies!" do
      assert "Should not make the suite skipped if it depends_on nothing"
      assert "Should not make the suite skipped if everything it depends_on is provided"
      assert "Should not make the suite skipped if more than everything it depends_on is provided"
      assert "Should make the suite skipped if not everything it depends_on is provided"
    end

must be moved to "run" tests:
  assert "Runs all enclosing suite's setup blocks, outermost first" do
    executed  = []
    block1    = proc { executed << :block1 }
    block2    = proc { executed << :block2 }
    suite1    = ::BareTest::Suite.new("block1") do setup(&block1) end
    suite2    = ::BareTest::Suite.new("suite2", suite1) do setup(&block2) end
    assertion = ::BareTest::Assertion.new(suite2, "assertion")

    raises_nothing do assertion.setup end &&
    equal([:block1, :block2], executed)
  end

  assert "Runs all enclosing suite's teardown blocks, innermost first" do
    executed  = []
    block1    = proc { executed << :block1 }
    block2    = proc { executed << :block2 }
    suite1    = ::BareTest::Suite.new("block1") do teardown(&block1) end
    suite2    = ::BareTest::Suite.new("suite2", suite1) do teardown(&block2) end
    assertion = ::BareTest::Assertion.new(suite2, "assertion")

    raises_nothing do assertion.teardown end &&
    equal([:block2, :block1], executed)
  end

